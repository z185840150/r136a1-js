'use strict';

var path = require('path');
var webpack = require('webpack');
var MFS = require('memory-fs');
var clientConfig = require('./webpack.client.config');
var serverConfig = require('./webpack.server.config');

module.exports = function setupDevServer(app, cb) {
  var bundle = void 0;
  var clientManifest = void 0;
  var resolve = void 0;
  var resolved = false;
  var readyPromise = new Promise(function (r) {
    resolve = r;
  });
  var ready = function ready() {
    if (!resolved) resolve();
    cb.apply(undefined, arguments);
  };

  // modify client config to work with hot middleware
  clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app];
  clientConfig.output.filename = '[name].js';
  clientConfig.plugins.push(new webpack.HotModuleReplacementPlugin(), new webpack.NoEmitOnErrorsPlugin());

  // dev middleware
  var clientCompiler = webpack(clientConfig);
  var devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true
  });
  app.use(devMiddleware);
  clientCompiler.plugin('done', function () {
    var fs = devMiddleware.fileSystem;
    var readFile = function readFile(file) {
      return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8');
    };
    clientManifest = JSON.parse(readFile('vue-ssr-client-manifest.json'));
    if (bundle) {
      ready(bundle, {
        clientManifest: clientManifest
      });
    }
  });

  // hot middleware
  app.use(require('webpack-hot-middleware')(clientCompiler));

  // watch and update server renderer
  var serverCompiler = webpack(serverConfig);
  var mfs = new MFS();
  serverCompiler.outputFileSystem = mfs;
  serverCompiler.watch({}, function (err, stats) {
    if (err) throw err;
    stats = stats.toJson();
    stats.errors.forEach(function (err) {
      return console.error(err);
    });
    stats.warnings.forEach(function (err) {
      return console.warn(err);
    });
    var readFile = function readFile(file) {
      return mfs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8');
    };

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile('vue-ssr-server-bundle.json'));
    if (clientManifest) {
      ready(bundle, {
        clientManifest: clientManifest
      });
    }
  });

  return readyPromise;
};
//# sourceMappingURL=setup-dev-server.js.map
